{
  "openapi": "3.0.0",
  "info": {
    "title": "FILMEX API",
    "description": "API documentation for FILMEX movie store application",
    "version": "1.0.0",
    "contact": {
      "email": "support@filmex.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "User management operations"
    },
    {
      "name": "movies",
      "description": "Movie catalog operations"
    },
    {
      "name": "favorites",
      "description": "Favorite movies operations"
    },
    {
      "name": "orders",
      "description": "Order management operations"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": ["users"],
        "summary": "Create a new user",
        "description": "Register a new user in the system",
        "operationId": "addUser",
        "requestBody": {
          "description": "User object to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "User already exists"
          }
        }
      },
      "get": {
        "tags": ["users"],
        "summary": "Get all users",
        "description": "Returns a list of all users (admin only)",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/{email}": {
      "get": {
        "tags": ["users"],
        "summary": "Get user by email",
        "description": "Returns a single user by email",
        "operationId": "getUserByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email of the user to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["users"],
        "summary": "User login",
        "description": "Authenticate a user and return a token",
        "operationId": "loginUser",
        "requestBody": {
          "description": "Login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/movies": {
      "get": {
        "tags": ["movies"],
        "summary": "Get all movies",
        "description": "Returns a list of all available movies",
        "operationId": "getMovies",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Movie"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/movies/{id}": {
      "get": {
        "tags": ["movies"],
        "summary": "Get movie by ID",
        "description": "Returns a single movie by ID",
        "operationId": "getMovieById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the movie to return",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movie"
                }
              }
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/favorites": {
      "post": {
        "tags": ["favorites"],
        "summary": "Add movie to favorites",
        "description": "Add a movie to user's favorites",
        "operationId": "addFavoriteMovie",
        "requestBody": {
          "description": "Favorite movie object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteMovie"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Movie added to favorites successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteMovie"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Movie already in favorites"
          }
        }
      },
      "get": {
        "tags": ["favorites"],
        "summary": "Get user's favorite movies",
        "description": "Returns a list of user's favorite movies",
        "operationId": "getFavoriteMovies",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "ID of the user to get favorites for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FavoriteMovie"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": ["orders"],
        "summary": "Create a new order",
        "description": "Create a new order for a user",
        "operationId": "addOrder",
        "requestBody": {
          "description": "Order object to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": ["orders"],
        "summary": "Get user's orders",
        "description": "Returns a list of user's orders",
        "operationId": "getUserOrders",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "ID of the user to get orders for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": ["orders"],
        "summary": "Get order by ID",
        "description": "Returns a single order by ID",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the order to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NewUser": {
        "type": "object",
        "required": ["name", "lastname", "password", "mail"],
        "properties": {
          "name": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "Doe"
          },
          "password": {
            "type": "string",
            "example": "password123"
          },
          "mail": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "name": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "Doe"
          },
          "mail": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Login": {
        "type": "object",
        "required": ["mail", "password"],
        "properties": {
          "mail": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "example": "password123"
          }
        }
      },
      "Movie": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Interstellar"
          },
          "description": {
            "type": "string",
            "example": "Un grupo de exploradores emprende una misión espacial para encontrar un nuevo hogar para la humanidad."
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 19.99
          },
          "image": {
            "type": "string",
            "example": "https://m.media-amazon.com/images/I/91obuWzA3XL._AC_UF1000,1000_QL80_.jpg"
          },
          "year": {
            "type": "integer",
            "example": 2014
          },
          "director": {
            "type": "string",
            "example": "Christopher Nolan"
          },
          "cast": {
            "type": "string",
            "example": "Matthew McConaughey, Anne Hathaway, Jessica Chastain"
          },
          "trailer": {
            "type": "string",
            "example": "https://www.youtube.com/embed/zSWdZVtXT7E"
          }
        }
      },
      "FavoriteMovie": {
        "type": "object",
        "required": ["name", "year", "user_id"],
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "name": {
            "type": "string",
            "example": "Interstellar"
          },
          "year": {
            "type": "integer",
            "example": 2014
          },
          "user_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "added_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NewOrder": {
        "type": "object",
        "required": ["movie_name", "movie_price", "cantidad", "user_id"],
        "properties": {
          "movie_name": {
            "type": "string",
            "example": "Interstellar"
          },
          "movie_price": {
            "type": "number",
            "format": "float",
            "example": 19.99
          },
          "cantidad": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "movie_name": {
            "type": "string",
            "example": "Interstellar"
          },
          "movie_price": {
            "type": "number",
            "format": "float",
            "example": 19.99
          },
          "cantidad": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "total": {
            "type": "number",
            "format": "float",
            "example": 19.99
          },
          "order_date": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "completed", "cancelled"],
            "example": "pending"
          }
        }
      }
    }
  }
}
